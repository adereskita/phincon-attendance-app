//
//  ChangePasswordViewController.swift
//  phincon-attendance-app
//
//  Created by Sri Endah Ramurti on 27/04/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChangePasswordDisplayLogic: AnyObject
{
    func presenter(didChange viewModel: ChangePasswordModel.Put.ViewModel)
    func presenter(didFailedChange message: String)
}

class ChangePasswordViewController: UIViewController, ChangePasswordDisplayLogic
{
    var interactor: ChangePasswordBusinessLogic?
    var router: (NSObjectProtocol & ChangePasswordRoutingLogic & ChangePasswordDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ChangePasswordInteractor()
        let presenter = ChangePasswordPresenter()
        let router = ChangePasswordRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
    }
    
    // MARK: Do something
    
    weak var customView: ChangePasswordView!
    
    override func loadView() {
        super.loadView()
        setupView()
    }
    
    func setupView() {
        let screenRect = UIScreen.main.bounds
        let screenWidth = screenRect.size.width
        let screenHeight = screenRect.size.height
        
        let changePasswordView = ChangePasswordView(frame: CGRect(x: 0, y: 0, width: screenWidth, height: screenHeight))
        self.view = changePasswordView
        changePasswordView.delegate = self
        self.customView = changePasswordView
    }
    
    func setupAlert(isSuccess: Bool, error message: String?) {
        if isSuccess {
            let alert = UIAlertController(title: "Password Changed Successfully", message: message, preferredStyle: UIAlertController.Style.alert)
            alert.addAction(UIAlertAction(title: "OK", style: UIAlertAction.Style.default, handler: nil))
            self.present(alert, animated: true, completion: {
                DispatchQueue.main.asyncAfter(deadline: .now() + 1, execute: {
                    self.navigationController?.popViewController(animated: true)
                })
            })
        } else {
            let alert = UIAlertController(title: "Failed Edit Profile", message: message, preferredStyle: UIAlertController.Style.alert)
            alert.addAction(UIAlertAction(title: "OK", style: UIAlertAction.Style.default, handler: nil))
            self.present(alert, animated: true, completion: nil)
        }
    }
    
    func setupSpinner(isSuccess: Bool, message: String?) {
        customView.spinner.isHidden = false
        customView.spinner.style = .medium
        customView.spinner.backgroundColor = UIColor(white: 0.9, alpha: 0.6)
        customView.spinner.layer.cornerRadius = 10.0
        customView.spinner.translatesAutoresizingMaskIntoConstraints = false
        customView.spinner.startAnimating()
    }
    
    func presenter(didChange viewModel: ChangePasswordModel.Put.ViewModel) {
        self.setupSpinner(isSuccess: true, message: "")
        self.view.isUserInteractionEnabled = false

        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
            self.customView.spinner.isHidden = true
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                self.view.isUserInteractionEnabled = true
                self.setupAlert(isSuccess: true, error: nil)
            }
        }
    }
    func presenter(didFailedChange message: String) {
        self.setupSpinner(isSuccess: false, message: message)
        self.view.isUserInteractionEnabled = false
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
            self.customView.spinner.isHidden = true
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                self.view.isUserInteractionEnabled = true
                self.setupAlert(isSuccess: false, error: message)
            }
        }
    }
}

extension ChangePasswordViewController: ButtonChangeDelegate {
    func didTapSaveButton() {
        let request = ChangePasswordModel.Put.Request(password: customView.passwordTextField.text!, new_password: customView.newPassTextField.text!, confirm_password: customView.confirmPassTextField.text!)
        interactor?.changePssword(request)
    }
    
    func didTapBackButton() {
        self.navigationController?.popViewController(animated: true)
    }
}
