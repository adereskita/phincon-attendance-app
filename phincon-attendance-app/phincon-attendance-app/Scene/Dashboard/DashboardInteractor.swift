//
//  DashboardInteractor.swift
//  phincon-attendance-app
//
//  Created by Ade on 3/24/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DashboardBusinessLogic {
    func loadDashboardListIn(request: DashboardModels.LoadCheckInOut.Request)
    func loadDashboardListOut(request: DashboardModels.LoadCheckInOut.Request)
    func checkLoginSession(request: DashboardModels.IsLogin.Request)
}

protocol DashboardDataStore {
  var token: String { get set }
}

class DashboardInteractor: DashboardBusinessLogic, DashboardDataStore {
    
    var presenter: DashboardPresentationLogic?
    var worker = DashboardWorker()
    let userDefault = UserDefaults.standard
    
    var checkInList = [Checkin]()
    var checkOutList = [Checkin]()
    var token: String = ""

  // MARK: Do something
    func loadDashboardListIn(request: DashboardModels.LoadCheckInOut.Request) {
        checkInList = worker.fetchDashboardListIn()
        
        let response = DashboardModels.LoadCheckInOut.Response(checkInData: checkInList)
        presenter?.presentDashboardListIn(response: response)
    }
    
    func loadDashboardListOut(request: DashboardModels.LoadCheckInOut.Request) {
        checkOutList = worker.fetchDashboardListOut()
        
        let response = DashboardModels.LoadCheckInOut.Response(checkInData: checkOutList)
        presenter?.presentDashboardListOut(response: response)
    }
    
    func checkLoginSession(request: DashboardModels.IsLogin.Request) {
        token = userDefault.string(forKey: "user_token")!
        worker.loginSession(token: token, completionHandler: { (result) in
            
            switch result {
            case .success(let value):
                print("value") // remove " character to print decoded value
                
            case .failure(let error):
                self.presenter?.interactor(didExpiredSession: error.status, message: error.message!)
            }
            
        })
    }
}
