//
//  DashboardWorker.swift
//  phincon-attendance-app
//
//  Created by Ade on 3/24/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DashboardWorkerProtocol: AnyObject {
    func loginSession(token: String, completionHandler: @escaping (Result<DashboardModels.IsLogin.Response, APIError>) -> Void)
    func getLocation(token: String, completionHandler: @escaping (Result<DashboardModels.GetLocation.Response, APIError>) -> Void)
    func checkIn(location: String, token: String, completionHandler: @escaping (Result<DashboardModels.CheckLocation.Response, APIError>) -> Void)
    func checkOut(location: String, token: String, completionHandler: @escaping (Result<DashboardModels.CheckLocation.Response, APIError>) -> Void)
}

class DashboardWorker: DashboardWorkerProtocol {
    
    // MARK: - Private Properties
//    private var service: ClientAPIProtocol
    private var service: ClientAPIDashboardProtocol

    // MARK: - Init
    init(_ service: ClientAPIDashboardProtocol = ClientAPI()) {
        self.service = service
    }
    
    func checkOut(location: String, token: String, completionHandler: @escaping (Result<DashboardModels.CheckLocation.Response, APIError>) -> Void) {
        service.checkOut(location: location, token: token, completionHandler: { result in
            switch result {
            case .success(let value):
                completionHandler(.success(value))
            case .failure(let error):
                completionHandler(.failure(APIError(status: error.status, message: error.message)))
            }
        })
    }
    
    func checkIn(location: String, token: String, completionHandler: @escaping (Result<DashboardModels.CheckLocation.Response, APIError>) -> Void) {
        service.checkIn(location: location, token: token, completionHandler: { result in
            switch result {
            case .success(let value):
                completionHandler(.success(value))
            case .failure(let error):
                completionHandler(.failure(APIError(status: error.status, message: error.message)))
            }
        })
    }
    
    func getLocation(token: String, completionHandler: @escaping (Result<DashboardModels.GetLocation.Response, APIError>) -> Void) {
        service.getLocation(token: token, completionHandler: {result in
            switch result {
            case .success(let value):
                completionHandler(.success(value))
            case .failure(let error):
                completionHandler(.failure(APIError(status: error.status, message: error.message)))
            }
        })
    }
    
    func loginSession(token: String, completionHandler: @escaping (Result<DashboardModels.IsLogin.Response, APIError>) -> Void) {
        service.loginSession(token: token, completionHandler: { result in
            switch result {
            case .success(let value):
                completionHandler(.success(value))
            case .failure(let error):
                completionHandler(.failure(APIError(status: error.status, message: error.message)))
            }
        })
    }
}
