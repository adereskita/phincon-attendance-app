//
//  HistoryViewController.swift
//  phincon-attendance-app
//
//  Created by Ade on 3/22/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HistoryDisplayLogic: AnyObject {
    func presenter(LoadHistory response: HistoryModels.FetchHistory.Response)
}

class HistoryViewController: UIViewController, HistoryDisplayLogic {
    
    var interactor: HistoryBusinessLogic?
    var router: (NSObjectProtocol & HistoryRoutingLogic & HistoryDataPassing)?

  // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
        
    }
  
// MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = HistoryInteractor()
        let presenter = HistoryPresenter()
        let router = HistoryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
// MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
          return .lightContent
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        self.historyView.filterCollView.selectItem(at: IndexPath(row: 0, section: 0), animated: true, scrollPosition: .top)
        logsFilter = historyFilter.first!
        fetchHistoryList(logs: logsFilter)
    }
    
    override func loadView() {
        super.loadView()
        setupViewNib()
    }
  
    // MARK: Do something
    weak var historyView: HistoryView!
    
    var historyFilter: [String] = []
    var logsFilter: String!

    var historyDataList: [History] = [History]() {
        didSet {
            self.historyView.historyTableView.reloadData()
            if historyDataList.count > 0 {
                historyView.emptyLbl.isHidden = true
                historyView.historyTableView.refreshControl = UIRefreshControl()
                historyView.historyTableView.refreshControl?.addTarget(self, action: #selector(didPullToRefresh), for: .valueChanged)
            } else {
                historyView.historyTableView.refreshControl = UIRefreshControl()
                historyView.historyTableView.refreshControl?.addTarget(self, action: #selector(didPullToRefresh), for: .valueChanged)
//                historyView.historyTableView.refreshControl = nil
                historyView.emptyLbl.isHidden = false
            }
        }
    }
    
    func setupViewNib() {
        let screenRect = UIScreen.main.bounds
        let screenWidth = screenRect.size.width
        let screenHeight = screenRect.size.height
        
        let historyViews = HistoryView(frame: CGRect(x: 0, y: 0, width: screenWidth, height: screenHeight))
        self.view = historyViews
//        self.view.addview(dashboardViews)
        self.historyView = historyViews
        
        self.historyView.navBar.delegate = self
    }
    
    func setupUI() {
        historyFilter = ["Day","Week","Month","Year"]
        historyView.historyTableView.delegate = self
        historyView.historyTableView.dataSource = self
        
        historyView.filterCollView.delegate = self
        historyView.filterCollView.dataSource = self
    }
    
    func presenter(LoadHistory response: HistoryModels.FetchHistory.Response) {
        historyDataList.removeAll()
        historyDataList.append(contentsOf: response.success.result!)
    }
    
    func fetchHistoryList(logs: String) {
        let requestFetch = HistoryModels.FetchHistory.Request(log: logs)
        interactor?.loadHistory(request: requestFetch)
    }
    
    @objc func didPullToRefresh() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            self.fetchHistoryList(logs: self.logsFilter.lowercased())
            self.historyView.historyTableView.refreshControl?.endRefreshing()
        }
    }
}


// MARK: extension TABLEVIEW & COLLECTION
extension HistoryViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return historyDataList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "HistoryTableViewCell", for: indexPath) as! HistoryTableViewCell
        let historyObj = historyDataList[indexPath.row]
        cell.setHistoryView(with: historyObj)
//        cell.selectionStyle = .none
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let historyObj = historyDataList[indexPath.row]
        
        interactor?.getSafariLink(historyObj.locationAddress!)
        router?.routeToSafariLink(segue: nil)
        tableView.deselectRow(at: indexPath, animated: false)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
//        let tableViewHeight = tableView.frame.size.height / 6
        let heightRatio = UIScreen.main.bounds.height / 736
        return tableView.estimatedRowHeight * heightRatio
    }
}

// MARK: Collection view
extension HistoryViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return historyFilter.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "DayFilterCollViewCell", for: indexPath) as! DayFilterCollViewCell
        
        let filterDay = historyFilter[indexPath.row]
        cell.setView(filterDay)
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let logsDay = historyFilter[indexPath.row]
        if indexPath.row == 0 {
            logsFilter = logsDay
            fetchHistoryList(logs: logsDay.lowercased())
        } else if indexPath.row == 1 {
            logsFilter = logsDay
            fetchHistoryList(logs: logsDay.lowercased())
        } else if indexPath.row == 2 {
            logsFilter = logsDay
            fetchHistoryList(logs: logsDay.lowercased())
        } else {
            logsFilter = logsDay
            fetchHistoryList(logs: logsDay)
        }
    }
    
    //MARK:- FlowLayout
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let screenWidth = collectionView.frame.size.width
        let screenHeight = collectionView.frame.size.height
        return CGSize(width: screenWidth/4, height: screenHeight)
    }

    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
}

// MARK: Delegate from View
extension HistoryViewController: NavBarButtonDelegate {
    func didTapNotif() {
        router?.routeToNotification(segue: nil)
    }
}
