//
//  HistoryViewController.swift
//  phincon-attendance-app
//
//  Created by Ade on 3/22/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HistoryDisplayLogic: AnyObject {
//    func displayHistoryList(viewModel: HistoryModel.LoadHistory.ViewModel)
    func displayHistoryList(history: HistoryModel.LoadHistory.Response)
    func fetchHistoyByWeek(history: HistoryModel.LoadHistory.Response)
    func fetchHistoyByDay(history: HistoryModel.LoadHistory.Response)
    func presenter(LoadHistory response: HistoryModel.FetchHistory.Response)
}

class HistoryViewController: UIViewController, HistoryDisplayLogic {
    
    var interactor: HistoryBusinessLogic?
    var router: (NSObjectProtocol & HistoryRoutingLogic & HistoryDataPassing)?

  // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
        
    }
  
// MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = HistoryInteractor()
        let presenter = HistoryPresenter()
        let router = HistoryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
// MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
          return .lightContent
    }
    
    override func viewWillAppear(_ animated: Bool) {
        self.filterCollView.selectItem(at: IndexPath(row: 0, section: 0), animated: true, scrollPosition: .top)
        //for now use removeSubrange
        historyDataList.removeSubrange(2...)
        historyTableView.reloadData()
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        fetchHistoryList()
    }
  
    // MARK: Do something
    
    var historyDataStore: [History] = []
    var historyDataList: [History] = []
    var historyFilter: [String] = []
  
    @IBOutlet var cardView: UIView!
    @IBOutlet var filterCollView: UICollectionView!
    @IBOutlet var historyTableView: UITableView!
    
    func setupUI() {
        historyTableView.register(HistoryTableViewCell.nib(), forCellReuseIdentifier: HistoryTableViewCell.identifier)
        historyTableView.delegate = self
        historyTableView.dataSource = self
        historyTableView.estimatedRowHeight = 72
        
        filterCollView.register(DayFilterCollViewCell.nib(), forCellWithReuseIdentifier: DayFilterCollViewCell.identifier)
        filterCollView.delegate = self
        filterCollView.dataSource = self
        
        cardView.layer.cornerRadius = 20
        cardView.layer.shadowColor = UIColor.lightGray.cgColor
        cardView.layer.shadowOffset = CGSize.zero
        cardView.layer.shadowOpacity = 0.2
        cardView.layer.shadowRadius = 3.0
        cardView.layer.maskedCorners = [.layerMaxXMinYCorner, .layerMinXMinYCorner]
    }
    
    func presenter(LoadHistory response: HistoryModel.FetchHistory.Response) {
        
    }
    
    func fetchHistoryList() {
        let request = HistoryModel.LoadHistory.Request()
        let requestFetch = HistoryModel.FetchHistory.Request()
        interactor?.loadHistory(request: request)
//        interactor?.loadHistorys(request: requestFetch)
    }
    
    func displayHistoryList(history: HistoryModel.LoadHistory.Response) {
        historyDataStore = history.HistoryData
        historyDataList = historyDataStore
        historyFilter = ["Day","Week","Month","Year"]
    }
    
    func fetchHistoyByWeek(history: HistoryModel.LoadHistory.Response) {
//        historyDataList.removeAll()
        historyDataList = history.HistoryData
        historyTableView.reloadData()
    }

    func fetchHistoyByDay(history: HistoryModel.LoadHistory.Response) {
        //for now use removeSubrange
        historyDataList = history.HistoryData
        historyDataList.removeSubrange(2...)
        historyTableView.reloadData()
    }
    
    @IBAction func btnNotificationClicked(_ sender: Any) {
        router?.routeToNotification(segue: nil)
        
    }
}


// MARK: extension TABLEVIEW & COLLECTION
extension HistoryViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return historyDataList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "HistoryTableViewCell", for: indexPath) as! HistoryTableViewCell
        let historyObj = historyDataList[indexPath.row]
        cell.setHistoryView(with: historyObj)
//        cell.selectionStyle = .none
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let historyObj = historyDataList[indexPath.row]
        
        interactor?.getSafariLink(historyObj.desc!)
        router?.routeToSafariLink(segue: nil)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
//        let tableViewHeight = tableView.frame.size.height / 6
        let heightRatio = UIScreen.main.bounds.height / 736
        return tableView.estimatedRowHeight * heightRatio
    }
}

extension HistoryViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return historyFilter.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "DayFilterCollViewCell", for: indexPath) as! DayFilterCollViewCell
        
        let filterDay = historyFilter[indexPath.row]
        cell.setView(filterDay)
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let response = HistoryModel.LoadHistory.Response(HistoryData: historyDataStore)
        if indexPath.row == 0 {
            fetchHistoyByDay(history: response)
        } else if indexPath.row == 1 {
            fetchHistoyByWeek(history: response)
        } else {
            fetchHistoyByWeek(history: response)
        }
    }
    
    //MARK:- FlowLayout
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let screenWidth = collectionView.frame.size.width
        let screenHeight = collectionView.frame.size.height
        return CGSize(width: screenWidth/4, height: screenHeight)
    }

    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
}
