//
//  LoginViewController.swift
//  phincon-attendance-app
//
//  Created by Sri Endah Ramurti on 23/03/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: AnyObject {
    func presenter(displayLoginSuccess viewModel: LoginModels.Post.ViewModel)
    func presenter(didFailLogin message: String)
}

class LoginViewController: UIViewController, LoginDisplayLogic {
    var interactor: LoginBusinessLogic?
    var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = LoginInteractor()
        let presenter = LoginPresenter()
        let router = LoginRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        loginCustomView.errorLbl.isHidden = true
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
//        setupViewNib()
        
        let tap = UITapGestureRecognizer(target: self, action: #selector(dismissMyKeyboard))
        //Add this tap gesture recognizer to the parent view
        self.view.addGestureRecognizer(tap)
    }
    
    // MARK: Do something
    weak var loginCustomView: LoginView!
    
    override func loadView() {
        super.loadView()
        setupViewNib()
    }
    
    func setupViewNib() {
        let screenRect = UIScreen.main.bounds
        let screenWidth = screenRect.size.width
        let screenHeight = screenRect.size.height
        
        let loginView = LoginView(frame: CGRect(x: 0, y: 0, width: screenWidth, height: screenHeight))
        self.view = loginView
//        self.view.addview(loginView)
        loginView.delegate = self
        self.loginCustomView = loginView
    }
    
    @objc func dismissMyKeyboard() {
        view.endEditing(true)
    }
    
    func alertSetup(error message: String?) {
        let alert = UIAlertController(title: "Error Occured", message: message, preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "Ok", style: UIAlertAction.Style.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
    func presenter(displayLoginSuccess viewModel: LoginModels.Post.ViewModel) {
        //nameTextField.text = viewModel.name
        if viewModel.token != nil {
            loginCustomView.setupSpinner(isLogin: true, message: nil, router: self.router as! LoginRouter)
        }
    }
    
    func presenter(didFailLogin message: String) {
        loginCustomView.setupSpinner(isLogin: false, message: message, router: self.router as! LoginRouter)
    }
}

extension LoginViewController: ButtonTapDelegate {
    func didTapLoginButton(loginView: LoginView) {
//        let request = LoginModels.Post.Request(username: loginView.usernameTextField.text ?? "", password: loginView.passwordTextField.text ?? "")
//        interactor?.login(request)
        loginCustomView.setupSpinner(isLogin: true, message: nil, router: self.router as! LoginRouter)
    }
    
    func didTapBackButton() {
        self.navigationController?.popViewController(animated: true)
    }
    
    func didTapRegisterButton() {
        router?.routeToRegister(segue: nil)
    }
    
    func didTapForgotPassButton() {
        router?.routeToForgotPassword(segue: nil)
    }
}
