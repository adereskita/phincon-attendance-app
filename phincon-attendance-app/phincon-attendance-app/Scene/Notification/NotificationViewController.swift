//
//  NotificationViewController.swift
//  phincon-attendance-app
//
//  Created by Ade on 3/29/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NotificationDisplayLogic: AnyObject {
    func displayNotificationList(response: NotificationModels.FetchNotification.Response)
}

class NotificationViewController: UIViewController, NotificationDisplayLogic {
    var interactor: NotificationBusinessLogic?
    var router: (NSObjectProtocol & NotificationRoutingLogic & NotificationDataPassing)?

  // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
  // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = NotificationInteractor()
        let presenter = NotificationPresenter()
        let router = NotificationRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
  // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
  // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setNotification()
        setupUI()
    }
    
    func setupUI() {
        tableView.register(NotificationTableViewCell.Nib(), forCellReuseIdentifier: NotificationTableViewCell.identifier)
        tableView.delegate = self
        tableView.dataSource = self
        // eliminate extra separators below UITableView
        tableView.tableFooterView = UIView()
    }
  
  // MARK: Do something
  
    @IBOutlet weak var backBtn: UIButton!
    @IBOutlet var tableView: UITableView!
    
    var notificationList: [Notification] = []

    func setNotification() {
        let request = NotificationModels.FetchNotification.Request()
        interactor?.loadDashboardListIn(request: request)
    }
  
    func displayNotificationList(response: NotificationModels.FetchNotification.Response) {
        //nameTextField.text = viewModel.name
        notificationList = response.notificationData
    }
    
    @IBAction func didTapBackButton(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }

}

extension NotificationViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return notificationList.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "NotificationTableViewCell", for: indexPath) as! NotificationTableViewCell
        let notifObj = notificationList[indexPath.row]
        cell.setupCell(with: notifObj)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
    }
}
