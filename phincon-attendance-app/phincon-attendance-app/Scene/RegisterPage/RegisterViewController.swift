//
//  RegisterViewController.swift
//  phincon-attendance-app
//
//  Created by Sri Endah Ramurti on 01/04/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RegisterDisplayLogic: AnyObject {
    func presenter(displayRegisterSuccess viewModel: RegisterModels.Post.ViewModel)
    func presenter(didFailRegister message: String)
}

class RegisterViewController: UIViewController, RegisterDisplayLogic {
    
    var interactor: RegisterBusinessLogic?
    var router: (NSObjectProtocol & RegisterRoutingLogic & RegisterDataPassing)?

  // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
  // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = RegisterInteractor()
        let presenter = RegisterPresenter()
        let router = RegisterRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
  // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
  // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
       // customRegisterView.errorLbl.isHidden = true
    }
  
    override func viewDidLoad() {
        super.viewDidLoad()
        let tap = UITapGestureRecognizer(target: self, action: #selector(dismissMyKeyboard))
         //Add this tap gesture recognizer to the parent view
         view.addGestureRecognizer(tap)
    }
    
    override func viewDidAppear(_ animated: Bool) {
//        scrollView.contentSize = CGSize(width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height+300)
    }
  
  // MARK: Do something
    weak var customRegisterView: RegisterView!
    
    override func loadView() {
        super.loadView()
        setupUINibView()
    }
  
    func setupUINibView() {
        let screenRect = UIScreen.main.bounds
        let screenWidth = screenRect.size.width
        let screenHeight = screenRect.size.height
        
        let registerView = RegisterView(frame: CGRect(x: 0, y: 0, width: screenWidth, height: screenHeight))
        self.view = registerView
        registerView.delegate = self
        self.customRegisterView = registerView
    }
  //@IBOutlet weak var nameTextField: UITextField!
//    @IBOutlet weak var scrollView: UIScrollView!
//    @IBOutlet var cardView: UIView!
//    @IBOutlet var registerBtn: UIButton!
//    @IBOutlet weak var usernameTextField: UITextField!
//    @IBOutlet weak var idTextField: UITextField!
//    @IBOutlet weak var fullnameTextField: UITextField!
//    @IBOutlet weak var pass1TextField: UITextField!
//    @IBOutlet weak var pass2TextField: UITextField!
//    @IBOutlet var spinner: UIActivityIndicatorView!
//    @IBOutlet var errorLbl: UILabel!
//
//    @IBAction func registerButton(_sender: Any){
//        if pass1TextField.text == pass2TextField.text {
//            let request = RegisterModels.Post.Request(username: usernameTextField.text!, password: pass2TextField.text!, fullname: fullnameTextField.text!, idcardnumber: idTextField.text!)
//            interactor?.register(request)
//        }
//    }
//    @IBAction func loginButton(_sender: Any){
//        router?.routeToLogin(segue: nil)
//    }
//
//    func setupUI() {
//        spinner.isHidden = true
//        registerBtn.layer.cornerRadius = 10
//
//        let tap = UITapGestureRecognizer(target: self, action: #selector(dismissMyKeyboard))
//         //Add this tap gesture recognizer to the parent view
//         view.addGestureRecognizer(tap)
//
//        cardView.layer.shadowColor = UIColor.lightGray.cgColor
//        cardView.layer.shadowOffset = CGSize.zero
//        cardView.layer.shadowOpacity = 0.2
//        cardView.layer.shadowRadius = 3.0
//        cardView.layer.cornerRadius = 25
//        cardView.layer.maskedCorners = [.layerMaxXMinYCorner, .layerMinXMinYCorner]
//    }
//
//    func spinnerSetup(isLogin: Bool, message: String?) {
//        spinner.isHidden = false
//        spinner.style = .medium
//        spinner.backgroundColor = UIColor(white: 0.9, alpha: 0.6)
//        spinner.layer.cornerRadius = 10.0
//        spinner.translatesAutoresizingMaskIntoConstraints = false
//        spinner.startAnimating()
//
//        // wait two seconds to simulate some work happening
//        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
//            self.spinner.isHidden = true
//            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
//                if let route = self.router {
//                    if isLogin == true {
//                        route.routeToLogin(segue: nil)
//                    } else {
//                        self.errorLbl.isHidden = false
//                        self.errorLbl.text = message?.replacingOccurrences(of: "\"", with: "")
//                    }
//                }
//            }
//        }
//    }
    
    @objc func dismissMyKeyboard() {
        view.endEditing(true)
    }
    
    func presenter(displayRegisterSuccess viewModel: RegisterModels.Post.ViewModel) {
        customRegisterView.setupSpinner(isLogin: true, message: nil, router: self.router as! RegisterRouter)
    }
    
    func presenter(didFailRegister message: String) {
        customRegisterView.setupSpinner(isLogin: false, message: message, router: self.router as! RegisterRouter)
    }
}

extension RegisterViewController: ButtonTappedDelegate {
    
    func didTappedLoginButton() {
        router?.routeToLogin(segue: nil)
    }
    
    func didTappedRegisterButton(registerView: RegisterView) {
        customRegisterView.setupSpinner(isLogin: true, message: nil, router: self.router as! RegisterRouter)
        router?.routeDidRegister(segue: nil)
    }
}
